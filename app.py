import gradio as gr
from transformers import pipeline

# Load the summarization model once when the app starts.
# This prevents reloading the model on every single function call.
summarizer = pipeline("summarization", model="t5-small")

def summarize_text(text_to_summarize, min_length, max_length):
    """
    Summarizes the input text using the pre-loaded T5 model.
    """
    # Ensure inputs are correctly typed for the pipeline.
    min_len = int(min_length)
    max_len = int(max_length)

    # Perform summarization. truncation=True handles texts longer than the model's max input size.
    summary = summarizer(text_to_summarize, min_length=min_len, max_length=max_len, truncation=True)
    
    # The pipeline returns a list of dictionaries, we need to extract the summary text.
    return summary[0]['summary_text']

# Pre-defined example text to make testing easier.
example_text = """
Yapay zeka (AI), genellikle insan zekasÄ±nÄ± taklit eden ve problem Ã§Ã¶zme, Ã¶ÄŸrenme, algÄ±lama gibi gÃ¶revleri yerine getirebilen sistemlerin veya makinelerin oluÅŸturulmasÄ±yla ilgilenen bir bilgisayar bilimi dalÄ±dÄ±r. 
Son yÄ±llarda, Ã¶zellikle derin Ã¶ÄŸrenme ve bÃ¼yÃ¼k veri setlerinin yÃ¼kseliÅŸiyle birlikte yapay zeka alanÄ±nda devrim niteliÄŸinde geliÅŸmeler yaÅŸanmÄ±ÅŸtÄ±r. 
Bu teknolojiler, doÄŸal dil iÅŸleme (NLP), bilgisayarlÄ± gÃ¶rÃ¼ ve otonom sÃ¼rÃ¼ÅŸ gibi birÃ§ok alanda pratik uygulamalara dÃ¶nÃ¼ÅŸmÃ¼ÅŸtÃ¼r. 
AI'nÄ±n amacÄ±, sadece mevcut gÃ¶revleri otomatikleÅŸtirmek deÄŸil, aynÄ± zamanda insan yeteneklerini aÅŸan yeni Ã§Ã¶zÃ¼mler ve keÅŸifler yapmaktÄ±r.
"""

# Define the Gradio interface.
with gr.Blocks(theme=gr.themes.Soft()) as iface:
    gr.Markdown(
        """
        # ğŸš€ AkÄ±llÄ± Metin Ã–zetleyici
        Bu uygulama, [Hugging Face Transformers](https://huggingface.co/docs/transformers/index) kÃ¼tÃ¼phanesindeki `t5-small` modelini kullanarak girdiÄŸiniz uzun metinleri Ã¶zetler.
        AÅŸaÄŸÄ±daki metin kutusuna bir makale, rapor veya herhangi bir uzun metin yapÄ±ÅŸtÄ±rÄ±n ve sonucu gÃ¶rÃ¼n!
        """
    )
    with gr.Row():
        with gr.Column(scale=2):
            text_input = gr.Textbox(lines=15, label="Ã–zetlenecek Metin", placeholder="Buraya uzun bir metin yapÄ±ÅŸtÄ±rÄ±n...")
            summarize_button = gr.Button("Ã–zeti OluÅŸtur", variant="primary")
        
        with gr.Column(scale=1):
            min_length_slider = gr.Slider(minimum=20, maximum=100, value=30, step=5, label="Ã–zetin Minimum UzunluÄŸu")
            max_length_slider = gr.Slider(minimum=50, maximum=250, value=80, step=10, label="Ã–zetin Maksimum UzunluÄŸu")
            text_output = gr.Textbox(label="OluÅŸturulan Ã–zet", lines=10, interactive=False)

    gr.Examples(
        examples=[[example_text, 30, 80]],
        inputs=[text_input, min_length_slider, max_length_slider]
    )

    # Connect the button click event to the summarization function.
    summarize_button.click(
        fn=summarize_text, 
        inputs=[text_input, min_length_slider, max_length_slider], 
        outputs=text_output
    )

# Launch the web interface.
iface.launch()